--- bfd/elfxx-ba.c	2019-04-17 16:18:03.091268554 +0300
+++ bfd/elfxx-ba.c	2019-04-17 16:28:10.234763368 +0300
@@ -1478,8 +1478,8 @@
       struct elf_link_hash_entry *h;
 
       /* Force a PT_GNU_STACK segment to be created.  */
-      if (! elf_tdata (output_bfd)->stack_flags)
-        elf_tdata (output_bfd)->stack_flags = PF_R | PF_W | PF_X;
+      if (! elf_stack_flags(output_bfd))
+        elf_stack_flags(output_bfd) = PF_R | PF_W | PF_X;
 
       /* Define __stacksize if it's not defined yet.  */
       h = elf_link_hash_lookup (elf_hash_table (info), "__stacksize",
@@ -1693,7 +1693,7 @@
   if (! info)
     return TRUE;
 
-  for (p = tdata->phdr, m = tdata->segment_map; m != NULL; m = m->next, p++)
+  for (p = tdata->phdr, m = elf_seg_map(output_bfd); m != NULL; m = m->next, p++)
     if (m->p_type == PT_GNU_STACK)
       break;
 
--- gdb/remote-ba.c	2014-04-04 10:22:08.000000000 +0300
+++ gdb/remote-ba.c	2019-04-17 16:51:57.973593532 +0300
@@ -434,7 +434,7 @@
 {
   int i = 0;
   int gpr = 0;
-  struct gdbarch_tdep *tdep = gdbarch_tdep(target_gdbarch);
+  struct gdbarch_tdep *tdep = gdbarch_tdep(target_gdbarch());
 
   for (i=0; i<BA_REGDESCS_SIZE; i++)
     {
@@ -456,7 +456,7 @@
 configure_macregs(int enabled)
 {
     int i = 0;
-    struct gdbarch_tdep *tdep = gdbarch_tdep(target_gdbarch);
+    struct gdbarch_tdep *tdep = gdbarch_tdep(target_gdbarch());
 
     for (i=0; i<BA_REGDESCS_SIZE; i++)
       {
@@ -1171,7 +1171,7 @@
   status->kind = TARGET_WAITKIND_STOPPED;
 
   /* If we had an error, wait just a while, so user can press another ^C */
-  if (quit_flag)
+  if (check_quit_flag())
     usleep(1000000);
 
   tp->pc = ba_read_spr_reg(SPR_NPC);
@@ -2251,7 +2251,7 @@
 {
   uint32_t data;
   uint32_t dcmd_new = ba_create_dcmd(len);
-  struct gdbarch *current_gdbarch = target_gdbarch;
+  struct gdbarch *current_gdbarch = target_gdbarch ();
 
   assert(len <= 4);
 
@@ -2371,7 +2371,7 @@
 {
   uint32_t data;
   uint32_t dcmd_new = ba_create_dcmd(len);
-  struct gdbarch *current_gdbarch = target_gdbarch;	//OK?
+  struct gdbarch *current_gdbarch = target_gdbarch ();	//OK?
 
   assert(len <= 4);
 
@@ -2518,7 +2518,7 @@
                    const gdb_byte *writebuf, ULONGEST offset, LONGEST len)
 {
   struct ba_target_priv *tp = ops->to_data;
-  struct gdbarch *current_gdbarch = target_gdbarch;
+  struct gdbarch *current_gdbarch = target_gdbarch ();
 
   switch(object)
     {
@@ -2668,7 +2668,7 @@
   char *arg = xstrdup(spr_cmd_args);
   char *end;
   unsigned int spr = strtoul(arg, &end, 0);
-  enum bfd_endian byte_order = gdbarch_byte_order (target_gdbarch);
+  enum bfd_endian byte_order = gdbarch_byte_order (target_gdbarch ());
 
   assert_target();
 
--- gdb/ba-tdep.c	2014-04-04 10:22:08.000000000 +0300
+++ gdb/ba-tdep.c	2019-04-17 17:18:52.770608009 +0300
@@ -496,7 +496,7 @@
         {
           if (!tdep->ba_gdb_regdisabled[i])
             {
-              frame_register_read (frame, i, (gdb_byte *) &regv);
+              deprecated_frame_register_read (frame, i, (gdb_byte *) &regv); // TODO: use get_frame_register_value instead
               regv = extract_unsigned_integer ((gdb_byte *) &regv, 4, byte_order);
               printf_filtered ("  %08x", regv);
               column++;
